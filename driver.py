#! /usr/bin/env pythonimport random, sys"""Jonathan Portorreal"""def new(keys):    """Initializes a Map/dict with the given number of keys."""    aMap = []    for i in range(0, keys):        aMap.append([i])    return aMapdef adjacencyMatrix(graph, probability=.5):    """creates a 2d array to represent edges with nodes"""    size    = len(graph)    aMatrix = [[0 for x in range(size)] for x in range(size)]    for i in range(size):        for j in range(size):            if (makeEdge(probability) == True):                aMatrix[i][j] = 1                aMatrix[j][i] = 1            else:                aMatrix[i][j] = 0                aMatrix[j][i] = 0    return aMatrixdef makeEdge(probability):    """returns true if probabilty is below or equal to random float from    0.0 - 1.0 returns false if probability is above that number"""    create = False    p      = random.random() * 100    if (p <= probability * 100):        create = True    return createdef display(matrix):    """displays all nodes and their current edges"""    for row in range(len(matrix)):        print("-----ADJACENCY MATRIX-----")        for column in range(len(matrix)):            print("Node %d edge with Node %d: %d " % (row, column, matrix[row][column]))def generateGraph(nodes=100, probability=.5):    """creates a grape with n - amount of nodes and p - probability of making edges"""    global aMatrix    graph   = new(nodes)    aMatrix = adjacencyMatrix(graph, probability)    for key in range(nodes):        for value in range(nodes):            if (aMatrix[key][value] == 1):                graph[key].append(value)    return graphdef averageDegree():    """computes average node degree"""    size   = len(aMatrix)    degree = range(size)    for row in range(size):        count = 0        for column in range(size):            if (aMatrix[row][column] == 1):                count += 1                degree[row] = count            else:                degree[row] = 0    return average(degree)def avgFriendsDegree():    """Calculates average of friends average by using n-1 of average"""    global aMatrix    size = len(aMatrix)    ignoreCase = range(size)    count = 0    friends = range(size)    for i in range(size):        for j in range(size):            # removes current row from calculation            if (ignoreCase[count] == i):                i = 0                break            # iterates every other other row            if (aMatrix[i][j] == 1):                friends[i] += 1            else:                friends[i] = 0    # needed in order to loop through each row  including ones before removed row    count += 1    # calculates the average of friends    return average(friends)def average(array):    """computes average of the degree array"""    size    = len(array)    average = 0    for i in range(size):        average += array[i]    return average / sizedef star():    """8 nodes in star graph; 1 connected to all; n-1 connected to 1"""    p = generateGraph(8, 0)    for i in range(8):        for j in range(8):            aMatrix[0][j] = 1            aMatrix[i][0] = 1    avg       = averageDegree()    friendDeg = avgFriendsDegree()    print("-" * 50)    print("python hw5 star")    print("Average Degree of Star: %d" % avg)    print("Average Neighbors of Star: %d" % friendDeg)    print("Ratio of Star: %d/%d " % (avg,friendDeg))    print("-" * 50)    #print(aMatrix)def testCases():    """Here we put test cases to answer written part of hw"""    for i in range(10,100):            programStart(i, .23)def bribeAvg(friends):    """calculates average for randomly	chosen	friends	of	randomly	chosen	people"""    size   = len(friends)    degree = range(size)    for row in range(size):        count = 0        for column in range(size):            if (friends[row][column] == 1):                count += 1                degree[row] = count            else:                degree[row] = 0    return average(degree)def extraCredit():    """using 0.5 as it is a 50/50 chance someone will get bribed"""    node        = random.randint(10,100)    bribed      = 0.5    bribeMatrix = [[0 for i in range(node)] for j in range(node)]    avg1        = 0    avg2        = 0    #1) Just choose k people to bribe at random    #2) Choose the k people	to be randomly chosen friends of randomly chosen people    bribe    = generateGraph(node, bribed)    for i in range(random.randrange(node)):        for j in range(random.randrange(node)):            if(makeEdge(bribed) == True):                bribeMatrix[0][j] = 1                bribeMatrix[i][0] = 1            else:                bribeMatrix[i][j] = 0                bribeMatrix[j][i] = 0    for i in range(10):        avg1 += bribeAvg(bribeMatrix)        avg2 += programStart(node, bribed)    print("The average k people at random in 10 times is: %d " % (avg1/10))    print("The average k people of randomly chosen friends and people:  %d\n" % (avg2/10))def programStart(node, probability):    print("-" * 50)    p         = generateGraph(node, probability)    avg       = averageDegree()    friendDeg = avgFriendsDegree()    print("python hw5 %d %.1f \n" % (node,probability))    print("Testing an Erydos-Reny graph with G = %d and p = %g \n" % (node, probability))    print("Average Degree: %d"    % avg)    print("Average neighbors: %d" % friendDeg)    print("Ratio:  %d/%d"         % (avg,friendDeg))    print("-" * 50)    return avgdef main():    try:        if (len(sys.argv) == 3):            n = int(sys.argv[1])            p = float(sys.argv[2])            programStart(n, p)        else:            if (sys.argv[1] == "star"):                star()            if (sys.argv[1] == "test"):                testCases()            if (sys.argv[1] == "bribe"):                extraCredit()    except IndexError as x:        print("This program is coded to run in Terminal.")        print("Uncomment the code below or run in Terminal!!!")# Code below is code I used to debug and make sure program works well# Added a verbal representation of the Erydos graph to help see the connections# Printed the array to see if the adjacency matrix was accurate and if it actually stored# The Erydos-Graph genereated"""#Generate an Erydos-Renyi Randon Graph with n - nodes and p - probability: G(n,p)    p = generateGraph(5, .8)    print(p)    print("")#store it in an adjacency matrix    display(aMatrix)    print("")    print("-----ADJACENCY MATRIX-----")    print(aMatrix)    print("")#print to the screen what the average degree is    deg       = averageDegree()    friendDeg = avgFriendsDegree()    print("The average degree of this graph is: %d" % deg)    print("")#print to the screen what the average number of friends randomly chosen neighbor of a randomly chosen node has    'how many friends your friends have on average'    print("The average friend's degree is: %d" % friendDeg)#print the ratio of the last two numbers    print("The Ratio is: %d/%d " % (deg,friendDeg))"""if __name__ == '__main__':    main()